/*#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv/cxcore.h>

int main(int argc, char **argv)
{
	cvNamedWindow("Source", 1);
	cvNamedWindow("edges window", 1);
	cvNamedWindow("Drawings", 1);

	IplImage* src = cvLoadImage("img.jpg", 0);
	IplImage* edges = cvCreateImage(cvGetSize(src), 8, 1);

	// Finding edges
	cvThreshold(src, edges, 150, 255, CV_THRESH_OTSU);

	CvMemStorage* storage = cvCreateMemStorage();
	CvSeq* first_contour = NULL;

	int Nc = cvFindContours(
		edges,
		storage,
		&first_contour,
		sizeof(CvContour),
		CV_RETR_EXTERNAL);

	// Finding convex Hull
	CvMemStorage* hull_storage = cvCreateMemStorage();
	CvSeq* retHulls = NULL;

	for (CvSeq* i = first_contour; i != 0; i = i->h_next){
		// note h_next is next sequence.
		retHulls = cvConvexHull2(first_contour, hull_storage, CV_CLOCKWISE, 1);

	}

	// drawing contours and hull
	IplImage* draw = cvCreateImage(cvGetSize(edges), 8, 3);

	for (CvSeq* i = first_contour; i != 0; i = i->h_next){
		cvDrawContours(draw, first_contour, cvScalar(255, 0, 0, 0), cvScalar(255, 0, 0, 0), 0, 1, 8);
		cvDrawContours(draw, retHulls, cvScalar(255, 0, 0, 0), cvScalar(255, 0, 0, 0), 0, 1, 8);

	}

	cvShowImage("Source", src);
	cvShowImage("edges window", edges);
	cvShowImage("Drawings", draw);
	cvWaitKey();

	cvDestroyAllWindows();

	cvReleaseImage(&src);
	cvReleaseImage(&edges);
	cvReleaseImage(&draw);

	return 0;
}
#include <opencv2/opencv.hpp>

using namespace cv;

int main()
{
	Mat img;
	VideoCapture cap(0);

	while (true)
	{
		cap >> img;

		Mat edges;
		cvtColor(img, edges, CV_BGR2GRAY);

		Canny(edges, edges, 30, 60);

		imshow("Fucking Robot Shit", edges);
		waitKey(0);
	}

	return 0;
}*/

#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace cv;
using namespace std;

int thresh = 100;
int max_thresh = 255;
RNG rng(12345);

int main(int argc, char** argv)
{
	cout << "Program Starts Here." << endl;
	VideoCapture cap(0); //capture the video from webcam

	if (!cap.isOpened())  // if not success, exit program
	{
		cout << "Cannot open the web cam" << endl;
		return -1;
	}

	//namedWindow("Control", CV_WINDOW_AUTOSIZE); //create a window called "Control"

	int iLowH = 170;
	int iHighH = 179;
	int iLowS = 150;
	int iHighS = 255;

	int iLowV = 60;
	int iHighV = 255;
	
	//Create trackbars in "Control" window
//	createTrackbar("LowH", "Control", &iLowH, 179); //Hue (0 - 179)
//	createTrackbar("HighH", "Control", &iHighH, 179);

//	createTrackbar("LowS", "Control", &iLowS, 255); //Saturation (0 - 255)
//	createTrackbar("HighS", "Control", &iHighS, 255);

//	createTrackbar("LowV", "Control", &iLowV, 255);//Value (0 - 255)
//	createTrackbar("HighV", "Control", &iHighV, 255);
	
	int iLastX = -1;
	int iLastY = -1;

	//Capture a temporary image from the camera
	Mat imgTmp;
	cap.read(imgTmp);

	//Create a black image with the size as the camera output
	Mat imgLines = Mat::zeros(imgTmp.size(), CV_8UC3);;


	while (true)
	{
		Mat imgOriginal;

		bool bSuccess = cap.read(imgOriginal); // read a new frame from video



		if (!bSuccess) //if not success, break loop
		{
			cout << "Cannot read a frame from video stream" << endl;
			break;
		}

		Mat imgHSV;

		cvtColor(imgOriginal, imgHSV, COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV

		Mat imgThresholded;

		inRange(imgHSV, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), imgThresholded); //Threshold the image

		//morphological opening (removes small objects from the foreground)
		erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		dilate(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));

		//morphological closing (removes small holes from the foreground)
		dilate(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));

		Mat threshold_output;
		vector<vector<Point> > contours;
		vector<Vec4i> hierarchy;

		/// Detect edges using Threshold
		threshold(imgThresholded, threshold_output, thresh, 255, THRESH_BINARY);
		Mat temp;
		cout << "channels is " << threshold_output.channels() << endl;
		/// Find contours
		temp = threshold_output.clone();
		Scalar v1 = mean(temp);//Find average of pixel array
		if (v1.val[0]>0)
			cout << "Gray is not binary image" << endl;
		else
			cout << "Gray is binary image" << endl;
//		findContours(temp, contours, CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
/*		if (contours.size() != 0){ //SOMETHING WRONG WHEN CONTOURS != 0
			/// Find the convex hull object for each contour
			vector<vector<Point> >hull(contours.size());
			for (int i = 0; i < contours.size(); i++)
			{
				convexHull(Mat(contours[i]), hull[i], false);
			}

			/// Draw contours + hull results
			Mat drawing = Mat::zeros(threshold_output.size(), CV_8UC3);
			for (int i = 0; i < contours.size(); i++)
			{
				Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));
				drawContours(drawing, contours, i, color, 1, 8, vector<Vec4i>(), 0, Point());
				drawContours(drawing, hull, i, color, 1, 8, vector<Vec4i>(), 0, Point());
			}

			/// Show in a window
			namedWindow("Convex Hull", CV_WINDOW_AUTOSIZE);
			imshow("Convex Hull", drawing);
		}*/

		//Calculate the moments of the thresholded image
		Moments oMoments = moments(imgThresholded);

		double dM01 = oMoments.m01;
		double dM10 = oMoments.m10;
		double dArea = oMoments.m00;

		// if the area <= 10000, I consider that the there are no object in the image and it's because of the noise, the area is not zero 
		if (dArea > 10000)
		{
			//calculate the position of the object
			int posX = dM10 / dArea;
			int posY = dM01 / dArea;
			cout << "X = " << posX << endl;
			cout << "Y = " << posY << endl;
			if (posX > 275 && posX < 325){
				cout << "Object Straight Ahead." << endl;
			}
			else if (posX < 275){
				cout << "Turn Left." << endl;
			}
			else if (posX > 325){
				cout << "Turn Right." << endl;
			}

/*			if (iLastX >= 0 && iLastY >= 0 && posX >= 0 && posY >= 0)
			{
				//Draw a red line from the previous point to the current point
				line(imgLines, Point(posX, posY), Point(iLastX, iLastY), Scalar(0, 0, 255), 2);
			}*/

			iLastX = posX;
			iLastY = posY;
		}

		imshow("Thresholded Image", imgThresholded); //show the thresholded image

//		imgOriginal = imgOriginal + imgLines;
		imshow("Original", imgOriginal); //show the original image

		if (waitKey(30) == 27) //wait for 'esc' key press for 30ms. If 'esc' key is pressed, break loop
		{
			cout << "esc key is pressed by user" << endl;
			break;
		}
		
	}

	return 0;
}

